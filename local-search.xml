<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Github博客搭建指南(1)</title>
    <link href="/2024/12/06/Github%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/"/>
    <url>/2024/12/06/Github%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<p>不要怕，万里长征从今始，路是一步一步踏出去的</p><h3 id="序"><a href="#序" class="headerlink" title="序"></a>序</h3><p>我是近期才开始搭建 Github 博客的，写这篇博客的目的是把我的搭建方法分享出来，如果有对搭建博客有兴趣，但是不知从何开始的小白，可以使用这篇作为参考。</p><p>该篇文章仅作为大佬搭建步骤的归纳和总结，如有不足之处还望指正</p><p>注：本篇仅限于 win 系统</p><h3 id="1-搭建之前的准备"><a href="#1-搭建之前的准备" class="headerlink" title="1. 搭建之前的准备"></a>1. 搭建之前的准备</h3><h4 id="1-1-首先，你需要一个-Github-的账号"><a href="#1-1-首先，你需要一个-Github-的账号" class="headerlink" title="1.1 首先，你需要一个 Github 的账号"></a>1.1 首先，你需要一个 Github 的账号</h4><p>你可以直接进入<a href="https://www.github.com/"> Github 官网 </a>去注册一个账号<p>在注册或者打开的时候可能网络会有些慢，这里我给出两种解决方法</p><p>1.1.1 你可以去网络上搜索一下 Github 镜像站，然后访问 git</p><blockquote><p>镜像站一 <a href="https://bgithub.xyz/">https://bgithub.xyz</a><br>镜像站二 <a href="https://ggithub.xyz/">https://ggithub.xyz</a></p></blockquote><p>1.1.2 如果你拥有国外的 VPN VPS 等虚拟网络通道工具，可以打开该代理，通过代理去访问</p><h4 id="1-2-下载安装-git"><a href="#1-2-下载安装-git" class="headerlink" title="1.2 下载安装 git"></a>1.2 下载安装 git</h4><p><a href="https://git-scm.com/downloads/win"> git 官方下载地址</a></p><p><a href="https://gitforwindows.org/"> git 下载地址2 </a></p><p><a href="https://github.com/waylau/git-for-win"> git 下载地址3 </a></p><p>git 安装时可能会比较慢，同时可以去下载其他的东西</p><p>1.2.1 下载好了直接无脑下一步就行</p><p>1.2.2 安装完成后，鼠标右键可以看到：Git Bash Here，点击后打开了。</p><p>1.2.3 输入：git --version 测试是否成功安装</p><p>出现如下图片说明成功</p><p><img src="https://ooo.0x0.ooo/2024/12/11/OLfd5L.jpg"></p><h4 id="1-3-下载安装-node-js"><a href="#1-3-下载安装-node-js" class="headerlink" title="1.3 下载安装 node.js"></a>1.3 下载安装 node.js</h4><p><a href="https://nodejs.org/en/download/"> nodejs 下载官方地址</a></p><p>1.3.1 访问 nodejs 官方地址，下载对应的安装包，进行安装（简单的点击下一步）。</p><p>1.3.2 安装好之后，配置环境变量，并在终端里面输入：node -v</p><p>出现如下图片说明成功</p><p><img src="https://ooo.0x0.ooo/2024/12/11/OLfVSX.jpg"></p><h4 id="1-4-安装Hexo"><a href="#1-4-安装Hexo" class="headerlink" title="1.4 安装Hexo"></a>1.4 安装Hexo</h4><p>安装命令：npm install hexo -g</p><p>测试是否安装成功，命令：hexo -v</p><p>出现如下图片说明成功</p><p><img src="https://ooo.0x0.ooo/2024/12/11/OLlWBP.jpg"></p><h4 id="1-5-安装hexo依赖"><a href="#1-5-安装hexo依赖" class="headerlink" title="1.5 安装hexo依赖"></a>1.5 安装hexo依赖</h4><p>命令：npm install –save hexo-deployer-git</p><h4 id="1-6-git配置SSH-key"><a href="#1-6-git配置SSH-key" class="headerlink" title="1.6 git配置SSH key"></a>1.6 git配置SSH key</h4><p>前面注册并下载 git 之后，就可以去配置 SSH key</p><p>配置这个的目的是为了方便使用，就是在当前电脑上，可以无需密码，通过 SSH 验证的方式去登录</p><p>配置 SSH 的方法是</p><p>1.6.1 生成 ssh key</p><blockquote><p>ssh-keygen -t rsa -C “邮件地址”<br>备注：这里的邮件地址是github账号绑定的邮件地址 (在注册的时候有)<br>生成 key 之后，可以在上面命令的提示文档处看到一个 id_rsa.pub 文件</p></blockquote><p>1.6.2 在 github 里配置</p><blockquote><p>1.打开上面生成的 id_rsa.pub 文件<br>2.打开 github 登录之后点击右上角，然后点击setting<br><img src="https://ooo.0x0.ooo/2024/12/12/OLlldb.jpg"><br>点击 SSH and GPG keys，之后点击 New SSH key<br><img src="https://ooo.0x0.ooo/2024/12/12/OLljOl.jpg"><br>3.在此处将 id_rsa.pub 文件内容全部粘贴进去后，随便起一个 title，点击 Add SSH key<br>4.cmd 中输入命令测试是否成功：ssh -T <a href="mailto:&#103;&#105;&#x74;&#x40;&#x67;&#x69;&#x74;&#x68;&#x75;&#98;&#x2e;&#99;&#x6f;&#109;">&#103;&#105;&#x74;&#x40;&#x67;&#x69;&#x74;&#x68;&#x75;&#98;&#x2e;&#99;&#x6f;&#109;</a><br><img src="https://ooo.0x0.ooo/2024/12/12/OLl2Ng.jpg"><br>5.配置账号和密码<br>$ git config –global user.name “name” #你的github用户名<br>$ git config –global user.email “<a href="mailto:&#120;&#120;&#120;&#x40;&#113;&#113;&#x2e;&#99;&#111;&#x6d;">&#120;&#120;&#120;&#x40;&#113;&#113;&#x2e;&#99;&#111;&#x6d;</a>“ #填写你的github注册邮箱<br>至此，git SSH key 配置完成</p></blockquote><h3 id="2-搭建个人博客"><a href="#2-搭建个人博客" class="headerlink" title="2. 搭建个人博客"></a>2. 搭建个人博客</h3><p>我们此处使用的框架是 hexo，有兴趣的可以去其官网浏览一下<a href="https://hexo.io/zh-cn/"> hexo 官网</a> </p><h4 id="2-1-在-github-上新建一个博客的仓库"><a href="#2-1-在-github-上新建一个博客的仓库" class="headerlink" title="2.1 在 github 上新建一个博客的仓库"></a>2.1 在 github 上新建一个博客的仓库</h4><p>2.1.1 新建一个github仓库</p><blockquote><p>1.点击右上角，然后点击 Your repositories，之后点击 New<br><img src="https://ooo.0x0.ooo/2024/12/17/OEOwDN.png"><br>仓库名称格式： 你的用户名.github.io<br>注意！使用的一定是你github登录时的用户名，例如我的用户名就是 orangedgame ，所以使用的也是这个<br>2.勾选Add a README file，并且注意到下面默认分支名是 main<br><img src="https://ooo.0x0.ooo/2024/12/17/OEaB5t.jpg"><br>3.点击 Create repository，博客的仓库就这样建好了</p></blockquote><h4 id="2-2-新建博客"><a href="#2-2-新建博客" class="headerlink" title="2.2 新建博客"></a>2.2 新建博客</h4><p>2.2.1 在本地电脑上新建一个存放博客的目录 例如我在 D 盘创建了一个 Blog 的文件夹：D:\Blog</p><p>2.2.2 然后在该目录下使用命令 命令：hexo init （该命令运行时间较长，可能需要等待）</p><p>2.2.3 生成完成后，就可以生成静态网页 命令：hexo g</p><p>2.2.4 此时可以通过本地预览查看网页 命令：hexo s，此时本地的博客就创建好了</p><p>2.2.5 可以按 ctrl+c 停止该命令</p><h4 id="2-3-将博客到上传到-github-仓库"><a href="#2-3-将博客到上传到-github-仓库" class="headerlink" title="2.3 将博客到上传到 github 仓库"></a>2.3 将博客到上传到 github 仓库</h4><blockquote><p>1.打开你创建好博客目录当中的 _config.yml 文件<br><img src="https://ooo.0x0.ooo/2024/12/17/OEaTKx.jpg"><br>2.拉到最下面，找到 deploy: 然后将下面复制过去<br>deploy:<br>type: git<br>repository: <a href="mailto:&#103;&#x69;&#x74;&#64;&#103;&#x69;&#116;&#104;&#117;&#x62;&#46;&#99;&#111;&#109;">&#103;&#x69;&#x74;&#64;&#103;&#x69;&#116;&#104;&#117;&#x62;&#46;&#99;&#111;&#109;</a>:用户名&#x2F;用户名.github.io.git<br>branch: main<br>将里面的用户名改为你自己的 git 用户名<br>3.发布到github<br>命令：hexo d<br>在浏览器访问 https:&#x2F;&#x2F;用户名.github.io&#x2F;<br>将其中的用户名改为你自己的 git 用户名</p></blockquote><p>参考链接：</p><p><a href="https://zhuanlan.zhihu.com/p/392994381"> 【保姆级】利用Github搭建自己的个人博客，看完就会</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>DrawCall研究随机</title>
    <link href="/2024/12/02/DrawCall%E7%A0%94%E7%A9%B6%E9%9A%8F%E6%9C%BA/"/>
    <url>/2024/12/02/DrawCall%E7%A0%94%E7%A9%B6%E9%9A%8F%E6%9C%BA/</url>
    
    <content type="html"><![CDATA[<p>参考文档：1. <a href="https://www.nvidia.com/docs/IO/8228/BatchBatchBatch.pdf">BatchBatchBatch.PDF </a></p><p>参考文档：2. <a href="https://zhuanlan.zhihu.com/p/353856280">DrawCall，Batches，SetPass calls是什么？原理？【匠】 </a></p><h3 id="DrawCall-绘制调用-是什么"><a href="#DrawCall-绘制调用-是什么" class="headerlink" title="DrawCall (绘制调用) 是什么"></a>DrawCall (绘制调用) 是什么</h3><p>DrawCall就是CPU调用图像编程接口，比如 DirectX 的 DrawPrimitive/DrawIndexedPrimitive ，OpenGL 的 glDrawElement/glDrawArrays，以命令 GPU 进行渲染的操作</p><p>简单来讲，就是指 CPU 向 GPU 发送一条指令，用于进行渲染操作。即：DrawCall 就是一次渲染指令调用</p><h3 id="Batches-批处理-又是什么"><a href="#Batches-批处理-又是什么" class="headerlink" title="Batches (批处理)又是什么"></a>Batches (批处理)又是什么</h3><p>把数据加载到显存，设置渲染状态及数据，CPU 调用 DrawCall 的这一整个过程就是一个 Batch。</p><p>这个过程当中主要性能消耗点在于上传物体数据（加载到显存）和设置渲染状态及数据这一块，而不是DrawCall命令本身。</p><p>所以我们将多个 DrawCall 合并为一个 DrawCall 来减少调用DrawCall的开销（主要是调用DrawCall之前的一系列设置）</p><p>这个操作就是 Batches 批处理。</p><h3 id="什么会造成DrawCall增加"><a href="#什么会造成DrawCall增加" class="headerlink" title="什么会造成DrawCall增加"></a>什么会造成DrawCall增加</h3><h4 id="1-无法合批-打断合批"><a href="#1-无法合批-打断合批" class="headerlink" title="1.无法合批&#x2F;打断合批"></a>1.无法合批&#x2F;打断合批</h4><blockquote><p>1.Batch Breaker: Texture Change</p></blockquote><p>纹理的更改会造成合批被打断，即：会增加 Batches 的数量，而 Sprite 的更改不会。</p><p>解决方法：若要降低 DrawCall ，可使用打包图集的方法。</p><p>RawImage 的图片更换则一定会打断合批。</p><blockquote><p>2.Batch Breaker: Transform Change</p></blockquote><p>位置、旋转、缩放、等空间变化的更改会打断合批。</p><p>解决方法：在 UGUI 的使用中进行动静分离，以减少 UI 重绘，降低 DrawCall</p><blockquote><p>3.Batch Breaker: Material Change</p></blockquote><p>不同材质的物体也没办法进行合批，会造成合批被打断</p><p>解决方法：1.使用材质图集将多个纹理合并为一个纹理，以便多个对象可以使用同一个材质，从而实现合批。</p><p>2.使用 Material Property Blocks 进行材质的动态属性修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">示例：<br><span class="hljs-comment">// 获取材质实例</span><br><span class="hljs-type">Material</span> <span class="hljs-variable">instanceMaterial</span> <span class="hljs-operator">=</span> renderer.material;<br><br><span class="hljs-comment">// 使用 Material Property Blocks</span><br><span class="hljs-type">MaterialPropertyBlock</span> <span class="hljs-variable">propertyBlock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MaterialPropertyBlock</span>();<br>propertyBlock.SetColor(<span class="hljs-string">&quot;_Color&quot;</span>, Color.red); <span class="hljs-comment">// 修改颜色</span><br>renderer.SetPropertyBlock(propertyBlock);<br></code></pre></td></tr></table></figure><h4 id="2-透明物体"><a href="#2-透明物体" class="headerlink" title="2.透明物体"></a>2.透明物体</h4><p>透明图片需要单独处理透明度和深度排序</p><p>每个透明物体通常需要一个单独的 draw call</p><p>因此，不透明图片尽量不开启Alpha通道，如非必要，不使用透明物体以及透明图片，因为透明图片需要单独处理透明度和深度排序</p>]]></content>
    
    
    <categories>
      
      <category>Unity渲染</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Unity笔记</title>
    <link href="/2024/10/25/Unity%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/10/25/Unity%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h5 id="1-UGUI中-3D物体要显示在2D物品上，可以使用-render-texture、rawImage、然后设置Camera-来做"><a href="#1-UGUI中-3D物体要显示在2D物品上，可以使用-render-texture、rawImage、然后设置Camera-来做" class="headerlink" title="1.UGUI中 3D物体要显示在2D物品上，可以使用 render texture、rawImage、然后设置Camera 来做"></a>1.UGUI中 3D物体要显示在2D物品上，可以使用 render texture、rawImage、然后设置Camera 来做</h5><h5 id="2-使用的图床软件-https-img-tg"><a href="#2-使用的图床软件-https-img-tg" class="headerlink" title="2.使用的图床软件 https://img.tg/"></a>2.使用的图床软件 <a href="https://img.tg/">https://img.tg/</a></h5><h5 id="3-lua中-table-sort-的坑"><a href="#3-lua中-table-sort-的坑" class="headerlink" title="3.lua中 table.sort 的坑:"></a>3.lua中 table.sort 的坑:</h5><p>&emsp; 3.1. table中不能有 nil<br>&emsp; 3.2. 重写的比较函数，两个值相等时不能 return true</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/09/24/hello-world/"/>
    <url>/2024/09/24/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
